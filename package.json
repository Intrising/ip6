{
  "name": "ip6",
  "version": "0.1.5",
  "description": "IPv6 address helper utilities.",
  "main": "ip6.js",
  "bin": {
    "ip6": "./ip6"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/elgs/ip6.git"
  },
  "keywords": [
    "ipv6",
    "cli",
    "network"
  ],
  "author": {
    "name": "Elgs Qian Chen"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/elgs/ip6/issues"
  },
  "homepage": "https://github.com/elgs/ip6#readme",
  "readme": "# ip6\nIPv6 address helper utilities.\n\n## Installation\n### Module\n`npm install ip6`\n\n### Standalone\n`npm install ip6 -g`\n\n## Module Usage\n### To `normalize` IPv6 addresses\n```javascript\nvar ip6 = require('ip6');\n\nconsole.log(ip6.normalize('2404:6800:4003:808::200e'));\n// 2404:6800:4003:0808:0000:0000:0000:200e\nconsole.log(ip6.normalize('2404:6800:4003:0808:0000:0000:0000:200e'));\n// 2404:6800:4003:0808:0000:0000:0000:200e\nconsole.log(ip6.normalize('2404:6800:4003:808::'));\n// 2404:6800:4003:0808:0000:0000:0000:0000\nconsole.log(ip6.normalize('2404:68::'));\n// 2404:0068:0000:0000:0000:0000:0000:0000\nconsole.log(ip6.normalize('2404:0068:0000:0000:0000:0000:0000:0000'));\n// 2404:0068:0000:0000:0000:0000:0000:0000\nconsole.log(ip6.normalize('2404:6800:4003:0808:0:0:0:200e'));\n// 2404:6800:4003:0808:0000:0000:0000:200e\nconsole.log(ip6.normalize('::1'));\n// 0000:0000:0000:0000:0000:0000:0000:0001\n```\n\n### To `abbreviate` IPv6 addresses\n\n```javascript\nconsole.log(ip6.abbreviate('2001:0000:0111:0000:0011:0000:0001:0000'));\n// 2001:0:111:0:11:0:1:0\nconsole.log(ip6.abbreviate('2001:0001:0000:0001:0000:0000:0000:0001'));\n// 2001:1:0:1::1\nconsole.log(ip6.abbreviate('2001:0001:0000:0001:0000:0000:0000:0000'));\n// 2001:1:0:1::\nconsole.log(ip6.abbreviate('0000:0000:0000:0000:0000:0000:0000:0000'));\n// ::\nconsole.log(ip6.abbreviate('0000:0000:0000:0000:0000:0000:0000:0001'));\n// ::1\nconsole.log(ip6.abbreviate('2041:0000:140F:0000:0000:0000:875B:131B'));\n// 2041:0:140F::875B:131B\nconsole.log(ip6.abbreviate('2001:0001:0002:0003:0004:0005:0006:0007'));\n// 2001:1:2:3:4:5:6:7\n```\n\n### To divide a `/64` subnet into 4 `/66` subnets\n```javascript\nvar subnets = ip6.divideSubnet(\"2607:5300:60:1234::\", 64, 66);\nconsole.log(subnets);\n/*\noutputs:\n[ '2607:5300:0060:1234:0000:0000:0000:0000',\n  '2607:5300:0060:1234:4000:0000:0000:0000',\n  '2607:5300:0060:1234:8000:0000:0000:0000',\n  '2607:5300:0060:1234:c000:0000:0000:0000' ]\n*/\n```\n\n### To divide a `/64` subnet into `/128` subnets, but limit to 8 addresses\n```javascript\nvar subnets = ip6.divideSubnet(\"2607:5300:60:1234::\", 64, 128, 8);\nconsole.log(subnets);\n/*\n[ '2607:5300:0060:1234:0000:0000:0000:0000',\n  '2607:5300:0060:1234:0000:0000:0000:0001',\n  '2607:5300:0060:1234:0000:0000:0000:0002',\n  '2607:5300:0060:1234:0000:0000:0000:0003',\n  '2607:5300:0060:1234:0000:0000:0000:0004',\n  '2607:5300:0060:1234:0000:0000:0000:0005',\n  '2607:5300:0060:1234:0000:0000:0000:0006',\n  '2607:5300:0060:1234:0000:0000:0000:0007' ]\n*/\n```\n\n### To divide a `/64` subnet into `/128` subnets, but limit to 8 abbreviated addresses\n```javascript\nvar subnets = ip6.divideSubnet(\"2607:5300:60:1234::\", 64, 128, 8, true);\nconsole.log(subnets);\n/*\n[ '2607:5300:60:1234::',\n  '2607:5300:60:1234::1',\n  '2607:5300:60:1234::2',\n  '2607:5300:60:1234::3',\n  '2607:5300:60:1234::4',\n  '2607:5300:60:1234::5',\n  '2607:5300:60:1234::6',\n  '2607:5300:60:1234::7' ]\n*/\n```\n\n### To generate 5 random `/128` from a `/48` (output in abbreviated mode):\n```javascript\nvar r = ip6.randomSubnet(\"2607:5300:60::\", 48, 128, 5, true);\nconsole.log(r);\n/*\n[ '2607:5300:60:ba28:1acc:11ef:23a:770',\n  '2607:5300:60:c1e:1f2:4b93:f2e6:bc31',\n  '2607:5300:60:58b3:df4c:d91b:508f:b022',\n  '2607:5300:60:fec3:4790:f791:ae5b:8675',\n  '2607:5300:60:41b9:20a8:dd08:1c9e:7bc3' ]\n*/\n```\n\n### To calculate the range and size of a `/64` subnet:\n```javascript\nvar range = ip6.range(\"2607:5300:60:1234::\", 64, 128);\nconsole.log(range);\n/*\n{ start: '2607:5300:0060:1234:0000:0000:0000:0000',\n  end: '2607:5300:0060:1234:ffff:ffff:ffff:ffff',\n  size: 18446744073709552000 }\n */\n```\n\n### To calculate the range and size of a `/48` subnet divided into /56 subnets (output in abbreviated mode):\n```javascript\nvar range = ip6.range(\"2607:5300:60::\", 48, 56, true);\nconsole.log(range);\n/*\n{ start: '2607:5300:60::',\n  end: '2607:5300:60:ff00::',\n  size: 256 }\n */\n```\n\n### To generate a PTR record for DNS zone file:\n```javascript\nvar ptr = ip6.ptr(\"2607:5300:60:1234:cafe:babe:dead:beef\", 64);\nconsole.log(ptr);\n// f.e.e.b.d.a.e.d.e.b.a.b.e.f.a.c\n```\n\n## Standalone Usage\n### To normalize an IPv6 address:\n```bash\nip6 -n 2001:db8::\n2001:0db8:0000:0000:0000:0000:0000:0000\n```\n\n### To abbreviate an IPv6 address:\n```bash\nip6 -a 2001:0db8:0000:0000:0000:0000:0000:0000\n2001:db8::\n```\n\n### To divide a `/64` subnet into 4 `/66` subnets:\n```bash\nip6 -d 2001:db8:: 64 66\n2001:0db8:0000:0000:0000:0000:0000:0000\n2001:0db8:0000:0000:4000:0000:0000:0000\n2001:0db8:0000:0000:8000:0000:0000:0000\n2001:0db8:0000:0000:c000:0000:0000:0000\n```\n\n### To divide a `/64` subnet into `/80` subnets, but outputs only 5 subnets:\n```bash\nip6 -d 2001:db8:: 64 80 5\n2001:0db8:0000:0000:0001:0000:0000:0000\n2001:0db8:0000:0000:0002:0000:0000:0000\n2001:0db8:0000:0000:0003:0000:0000:0000\n2001:0db8:0000:0000:0004:0000:0000:0000\n2001:0db8:0000:0000:0005:0000:0000:0000\n```\n\n### To divide a `/64` subnet into `/80` subnets, but outputs only 5 subnets in abbreviated mode:\n```bash\nip6 -d -s 2001:db8:: 64 80 5\n2001:db8:0:0:1::\n2001:db8:0:0:2::\n2001:db8:0:0:3::\n2001:db8:0:0:4::\n2001:db8:0:0:5::\n```\n\n### To generate 5 random `/56` subnets from a `/48` subnets:\n```bash\nip6 -r -s 2607:5300:60:: 48 56 5\n2607:5300:60:6300::\n2607:5300:60:f300::\n2607:5300:60:7000::\n2607:5300:60:ce00::\n2607:5300:60:9100::\n```\n\n### To calculate the range and size of a `/48` subnet divided into /56 subnets (output in abbreviated mode):\n```bash\nip6 -R -s 2607:5300:60:: 48 56\n{\"start\":\"2607:5300:60::\",\"end\":\"2607:5300:60:ff00::\",\"size\":256}\n```\n\n### To generate a PTR record for DNS zone file:\n```bash\nip6 -p 2607:5300:60:1234:cafe:babe:dead:beef 64\nf.e.e.b.d.a.e.d.e.b.a.b.e.f.a.c\n```\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2016 Elgs Qian Chen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "_id": "ip6@0.1.5",
  "dist": {
    "shasum": "72db2ce26142cc00f6cca4c3c8488d91f0fc8f93"
  },
  "_from": "ip6"
}
